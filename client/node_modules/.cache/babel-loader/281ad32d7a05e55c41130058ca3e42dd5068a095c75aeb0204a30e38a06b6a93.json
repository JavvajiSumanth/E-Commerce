{"ast":null,"code":"var _jsxFileName = \"/Users/sumanthjavvaji/Desktop/React/my-app/client/src/Components/Weather.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherComponent = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const lat = 40.7128; // example latitude\n  const lon = -74.0060; // example longitude\n  const apiKey = 'YOUR_API_KEY'; // Replace 'YOUR_API_KEY' with your actual API key\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setWeatherData(data);\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array means this effect runs once after the initial render\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: weatherData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Weather for \", weatherData.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", weatherData.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description: \", weatherData.weather[0].description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading weather data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherComponent, \"BCUo9muHyxrqajg6diFxqqqjG/A=\");\n_c = WeatherComponent;\nexport default WeatherComponent;\nvar _c;\n$RefreshReg$(_c, \"WeatherComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherComponent","_s","weatherData","setWeatherData","lat","lon","apiKey","fetchData","response","fetch","ok","Error","data","json","error","console","children","name","fileName","_jsxFileName","lineNumber","columnNumber","main","temp","weather","description","_c","$RefreshReg$"],"sources":["/Users/sumanthjavvaji/Desktop/React/my-app/client/src/Components/Weather.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst WeatherComponent = () => {\n  const [weatherData, setWeatherData] = useState(null);\n  const lat = 40.7128; // example latitude\n  const lon = -74.0060; // example longitude\n  const apiKey = 'YOUR_API_KEY'; // Replace 'YOUR_API_KEY' with your actual API key\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setWeatherData(data);\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array means this effect runs once after the initial render\n\n  return (\n    <div>\n      {weatherData ? (\n        <div>\n          <h2>Weather for {weatherData.name}</h2>\n          <p>Temperature: {weatherData.main.temp}Â°C</p>\n          <p>Description: {weatherData.weather[0].description}</p>\n          {/* You can display other weather data properties as needed */}\n        </div>\n      ) : (\n        <p>Loading weather data...</p>\n      )}\n    </div>\n  );\n};\n\nexport default WeatherComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMQ,GAAG,GAAG,OAAO,CAAC,CAAC;EACrB,MAAMC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;EACtB,MAAMC,MAAM,GAAG,cAAc,CAAC,CAAC;;EAE/BT,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,uDAAsDL,GAAI,QAAOC,GAAI,UAASC,MAAO,EAAC,CAAC;QACrH,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCV,cAAc,CAACS,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDP,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACER,OAAA;IAAAiB,QAAA,EACGd,WAAW,gBACVH,OAAA;MAAAiB,QAAA,gBACEjB,OAAA;QAAAiB,QAAA,GAAI,cAAY,EAACd,WAAW,CAACe,IAAI;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACvCtB,OAAA;QAAAiB,QAAA,GAAG,eAAa,EAACd,WAAW,CAACoB,IAAI,CAACC,IAAI,EAAC,OAAE;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC7CtB,OAAA;QAAAiB,QAAA,GAAG,eAAa,EAACd,WAAW,CAACsB,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAErD,CAAC,gBAENtB,OAAA;MAAAiB,QAAA,EAAG;IAAuB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAC9B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpB,EAAA,CArCID,gBAAgB;AAAA0B,EAAA,GAAhB1B,gBAAgB;AAuCtB,eAAeA,gBAAgB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}